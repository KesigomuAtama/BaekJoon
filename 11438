#include <stdio.h>
#include <vector>
#include <queue>
using namespace std;
vector<int> vi[100003];
int depth[100003], D[100003][23];

void bfs(int st){
	int p, i;
	queue<int> Q;
	Q.push(st);
	depth[st]=1;
	D[st][0]=1;
	while(!Q.empty()){
		p=Q.front();
		for(i=0; i<vi[p].size(); i++){
			if(depth[vi[p][i]]) continue;
			Q.push(vi[p][i]);
			D[vi[p][i]][0]=vi[p][i];
			D[vi[p][i]][1]=p;
			depth[vi[p][i]]=depth[p]+1;
		}
		Q.pop();
	}
	return;
}


int main(){
	int N, M, i, j, x, y, tmp1, tmp2;
	bool stop;
	scanf("%d", &N);
	for(i=1; i<N; i++){
		scanf("%d %d", &x, &y);
		vi[x].push_back(y);
		vi[y].push_back(x);
	}

	bfs(1);
	for(j=2; j<=N; j++){
		stop=false;
		for(i=1; i<=N; i++){
			D[i][j]=D[D[i][j-1]][j-1];
			if(D[i][j]) stop=true;
		}
		if(!stop) break;
	}
	scanf("%d", &M);
	for(i=1; i<=M; i++)
	{
		scanf("%d %d", &x, &y);
		if(depth[x]<depth[y]){
			tmp1=x;
			x=y;
			y=tmp1;
		}
		tmp1=x, tmp2=y;
		while(1)
		{
			j=0;
			while(depth[D[tmp1][j+1]]>=depth[tmp2])
			{
				j++;
				tmp1=D[x][j];
			}
			x=tmp1;
			if(depth[x]==depth[y]) break;
		}
		if(x!=y)
		{
			while(1)
			{
				j=0;
				while(D[x][j+1]!=D[y][j+1])
				{
					j++;
					tmp1=D[x][j], tmp2=D[y][j];
				}
				x=tmp1, y=tmp2;
				if(j==0) break;
			}
			printf("%d\n", D[x][j+1]);
		}
		else printf("%d\n", y);
	}
	return 0;
}
